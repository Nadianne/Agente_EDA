import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from utils import eda, charts
from utils.memory import all_md, clear  # mem√≥ria


# ---------------------- Estilo customizado ----------------------
st.set_page_config(page_title="Agente de An√°lise EDA", layout="wide")

st.markdown("""
    <style>
        .main {background-color: #0e0e0e;}
        .stApp {background-color: #0e0e0e; color: #f5f5f5;}
        h1, h2, h3, h4, h5 {color: #ff4b4b;}
        .stButton button {background-color: #ff4b4b; color: white; border-radius: 8px;}
        .stButton button:hover {background-color: #d43c3c;}
    </style>
""", unsafe_allow_html=True)

# ---------------------- Cabe√ßalho ----------------------
st.title("Agente de An√°lise EDA")
st.markdown(" **Aluna: Nadianne Galv√£o**", unsafe_allow_html=True)

with st.container():
    st.markdown("""
    ###  Atividade ‚Äî *Institut d'Intelligence Artificielle Appliqu√©e*
    Esta atividade tem por objetivo criar um ou mais **agentes de E.D.A (Exploratory Data Analysis)** que permitam a um usu√°rio fazer perguntas sobre qualquer arquivo CSV disponibilizado.  
    A solu√ß√£o entrega uma **interface interativa** onde o usu√°rio informa a pergunta e o agente gera a resposta ‚Üí carregando o CSV, executando queries e/ou gerando o c√≥digo Python necess√°rio.  

    ---

    #### üõ†Ô∏è Frameworks e Bibliotecas utilizadas:
    - üìå **Streamlit** ‚Üí Interface web interativa  
    - üêº **Pandas** ‚Üí Manipula√ß√£o e an√°lise de dados  
    - üî¢ **NumPy** ‚Üí C√°lculos num√©ricos e estat√≠sticos  
    - ü§ñ **Scikit-learn** ‚Üí Algoritmos de machine learning (KMeans para clusters)  
    - üìà **Matplotlib & Seaborn** ‚Üí Visualiza√ß√µes estat√≠sticas  

    ---
    """)
    st.markdown("---")

# ---------------------- Manual ----------------------
with st.expander("üìñ Manual (passo a passo)"):
    st.markdown("""
    **Como utilizar o agente de an√°lise EDA:**

    1Ô∏è‚É£ **Upload de CSV** ‚Üí Envie um arquivo `.csv` para an√°lise.  
    2Ô∏è‚É£ **Perguntas em linguagem natural** ‚Üí Digite perguntas como *"Quais s√£o as m√©dias?"* ou *"Existem outliers?"*.  
    3Ô∏è‚É£ **M√©tricas estat√≠sticas** ‚Üí O agente calcula automaticamente medidas como m√©dia, mediana, vari√¢ncia etc.  
    4Ô∏è‚É£ **Gr√°ficos sob demanda** ‚Üí Gere histogramas, boxplots, dispers√µes, correla√ß√µes e s√©ries temporais.  
    5Ô∏è‚É£ **Mem√≥ria de conclus√µes** ‚Üí Cada resposta gera uma conclus√£o que pode ser revisitada na aba **Conclus√µes**.  

     Pronto! Agora basta explorar os dados de forma interativa.  
    """)

# Estado para o "chat"
if "chat" not in st.session_state:
    # cada item: {"pergunta": str, "texto": str, "acao": str|None, "params": dict}
    st.session_state["chat"] = []

uploaded_file = st.file_uploader(" Fa√ßa upload de um arquivo CSV", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file, low_memory=False)
    st.success(f"Arquivo carregado! {df.shape[0]:,} linhas √ó {df.shape[1]} colunas.")

    # ordenar por tempo se existir
    tcol = eda.detectar_tempo(df)
    if tcol:
        df = df.sort_values(tcol).reset_index(drop=True)

    # --- Vis√£o Geral ---
    with st.expander(" Vis√£o Geral (clique para abrir)", expanded=False):
        st.caption(f"{df.shape[0]:,} linhas √ó {df.shape[1]} colunas")
        mostrar_tudo = st.toggle("Mostrar todas as linhas (pode ficar lento)", value=False)
        limite = st.slider("Linhas quando N√ÉO mostrar tudo:", 100, 10000, 2000, step=100)
        df_view = df if mostrar_tudo else df.head(limite)
        st.dataframe(df_view, use_container_width=True, height=500, hide_index=False)

    # abas p/ navega√ß√£o
    tabs = st.tabs([" Perguntas (Agente)", " Gr√°ficos", " Conclus√µes"])

    # ---- Aba 1: Perguntas (chat) ----
    with tabs[0]:
        st.info("Exemplos: 'tipos de dados', 'intervalo', 'm√©dia', 'vari√¢ncia', "
                "'frequentes', 'outliers', 'correla√ß√£o', 'dispers√£o', "
                "'tend√™ncia temporal', 'clusters', 'vari√°veis mais influentes', "
                "'distribui√ß√£o de vari√°veis', 'tabela cruzada'.")

        # Hist√≥rico (render)
        st.subheader("Hist√≥rico")
        if not st.session_state["chat"]:
            st.caption("Sem intera√ß√µes ainda. Fa√ßa uma pergunta abaixo")
        else:
            for turn in st.session_state["chat"]:
                with st.container():
                    st.markdown(f"**Voc√™:** {turn['pergunta']}")
                    st.markdown(f"**Agente:** {turn['texto']}")

                    # Render da a√ß√£o (se houver)
                    acao = turn["acao"]
                    params = turn["params"] or {}

                    if acao == "tabela":
                        st.dataframe(params["data"], use_container_width=True)
                    elif acao == "dupla_tabela":
                        st.subheader("Outliers por coluna (%)")
                        st.dataframe(params["pct"], use_container_width=True)
                        st.subheader("Efeito dos outliers (compara√ß√£o mean/std)")
                        st.dataframe(params["efeito"], use_container_width=True)
                    elif acao == "dict_series":
                        for k, series in params["mapa"].items():
                            st.subheader(k); st.write(series)
                    elif acao == "serie":
                        st.write(params["serie"])
                    elif acao == "heatmap_corr":
                        st.pyplot(charts.heatmap_corr(df))
                    elif acao == "scatter":
                        st.pyplot(charts.scatter(df.select_dtypes("number"), params["x"], params["y"]))
                    elif acao == "timeseries":
                        st.pyplot(charts.timeseries(df, params["tcol"], params["ycol"]))
                    elif acao == "hist":
                        st.pyplot(charts.hist(df, params["col"]))
                    elif acao == "multi_plot":
                        for tipo, col in params["resultados"]:
                            st.subheader(f"{col} ({'Num√©rica' if tipo=='hist' else 'Categ√≥rica'})")
                            if tipo == "hist":
                                st.pyplot(charts.hist(df, col))
                            elif tipo == "bar":
                                st.bar_chart(df[col].value_counts().head(20))

                    # Conclus√£o curtinha (se veio)
                    if isinstance(params, dict) and params.get("conclusion"):
                        st.markdown("> **Conclus√£o:**")
                        st.info(params["conclusion"])

                    st.markdown("---")

        # Entrada + enviar
        pergunta = st.text_input("Digite sua pergunta ao agente:")
        if st.button("Responder"):
            texto, acao, params = eda.responder(df, pergunta)

            # guarda o turno no hist√≥rico do chat
            st.session_state["chat"].append({
                "pergunta": pergunta,
                "texto": texto,
                "acao": acao,
                "params": params,
            })

            # re-render para mostrar j√° no hist√≥rico
            st.rerun()

    # ---- Aba 2: Gr√°ficos sob demanda ----
    with tabs[1]:
        gtab = st.radio("Escolha", ["Histograma", "Boxplot", "Dispers√£o", "Correla√ß√£o", "S√©rie Temporal", "Tabela Cruzada"], horizontal=True)
        num_cols = df.select_dtypes("number").columns.tolist()
        cat_cols = [c for c in df.columns if c not in num_cols]

        if gtab == "Histograma" and num_cols:
            c = st.selectbox("Coluna num√©rica", num_cols)
            if st.button("Gerar histograma"):
                st.pyplot(charts.hist(df, c))

        if gtab == "Boxplot" and num_cols:
            c = st.selectbox("Coluna num√©rica", num_cols, key="box")
            if st.button("Gerar boxplot"):
                st.pyplot(charts.box(df, c))

        if gtab == "Dispers√£o" and len(num_cols) >= 2:
            x = st.selectbox("Eixo X", num_cols, key="x")
            y = st.selectbox("Eixo Y", num_cols, key="y")
            if st.button("Gerar dispers√£o"):
                st.pyplot(charts.scatter(df, x, y))

        if gtab == "Correla√ß√£o" and len(num_cols) >= 2:
            if st.button("Gerar correla√ß√£o"):
                st.pyplot(charts.heatmap_corr(df))

        if gtab == "S√©rie Temporal":
            tcol_here = eda.detectar_tempo(df)
            if tcol_here and num_cols:
                y = st.selectbox("Vari√°vel (Y)", num_cols, key="tsy")
                if st.button("Gerar s√©rie"):
                    st.pyplot(charts.timeseries(df, tcol_here, y))
            else:
                st.info("N√£o identifiquei coluna temporal + num√©rica.")

        if gtab == "Tabela Cruzada" and len(cat_cols) >= 2:
            a = st.selectbox("Categ√≥rica A", cat_cols, key="cta")
            b = st.selectbox("Categ√≥rica B", cat_cols, key="ctb")
            if st.button("Gerar crosstab"):
                st.dataframe(pd.crosstab(df[a], df[b]), use_container_width=True)

    # ---- Aba 3: Conclus√µes acumuladas ----
    with tabs[2]:
        st.markdown(all_md())
        if st.button("Limpar conclus√µes"):
            clear()
            st.success("Conclus√µes limpas. Fa√ßa novas perguntas e volte aqui")

else:
    st.info("Envie um arquivo CSV para come√ßar.")

